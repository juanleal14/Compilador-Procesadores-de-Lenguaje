/*LUCAS MONZÓN CASTAÑO      JUAN LEAL ALIAGA
  100473232                 100473223*/
%{                          // SECTION 1 Declarations for C-Bison
#include <stdio.h>
#include <ctype.h>            // tolower()
#include <string.h>           // strcmp() 
#include <stdlib.h>           // exit()

#define FF fflush(stdout);    // to force immediate printing 

int yylex () ;
void yyerror () ;
char *my_malloc (int) ;
char *gen_code (char *) ;
char *int_to_string (int) ;
char *char_to_string (char) ;
char temp [2048] ;
char fun_name[256];
// Definitions for explicit attributes

typedef struct s_attr {
    int value ;    // - Numeric value of a NUMBER 
    char *code ;   // - to pass IDENTIFIER names, and other translations 
} t_attr ;

struct func_attr {
    char * fun_name ; //name of the function I am in
    };
#define YYSTYPE t_attr     // stack of PDA has type t_attr

struct func_attr current_func;

typedef struct local_variables{
    char * identifier ;
    int val ;
} local_variables;
int i = 0;
struct local_variables current_variables[100];
int search_variable(local_variables current_variables[], char *name);
void empty_array(local_variables current_variables[], int size);
%}


// Definitions for explicit attributes

%token NUMBER        // token for numeric type
%token MAIN          // token for keyword main 
%token IDENTIF       // Identifier=variable
%token INTEGER       // token for integer type
%token STRING        // token for string type
%token WHILE         // token for keyword while
%token PUTS          // token for keyword puts
%token PRINTF        // token for keyword printf
%token IF
%token ELSE
%token FOR 
%token RETURN

%token AND        // token for keyword printf
%token OR        // token for keyword printf
%token DIFF        // token for keyword printf
%token EQ        // token for keyword printf
%token LTE        // token for keyword printf
%token GTE        // token for keyword printf

%right '='                    // last opertation to do 
%left OR
%left AND
%left EQ DIFF
%left '>' '<' GTE LTE
%left '+' '-'                 // lowest precedence
%left '*' '/' '%'             // 
%right '!'
%left UNARY_SIGN              // highest precedence


%%                            // Section 3 Grammar - Semantic Actions

axiom:   declaration_section   function_section  MAIN Main_declaration     { ; }
;
declaration_section: INTEGER RECURSIVE_IDENTIF ';' { printf ("%s\n", $2.code) ;} declaration_section { ; }
                    |           { ; }
                    ;

RECURSIVE_IDENTIF: IDENTIF ASSIGNMENT LAST_ASSIGNMENT {sprintf(temp,"(setq %s %s) %s",$1.code, $2.code, $3.code);
                                                            $$.code = gen_code (temp) ;}
            ;
            
ASSIGNMENT:     '=' NUMBER               { sprintf (temp, "%d", $2.value) ;
                                                $$.code = gen_code (temp) ;}
            |                               { sprintf (temp, "0") ;
                                                $$.code = gen_code (temp) ;}
            ;

LAST_ASSIGNMENT: ',' RECURSIVE_IDENTIF              {sprintf(temp,"%s",$2.code);
                                                            $$.code = gen_code (temp) ;}
            |   {strcpy(temp,"");
                                                $$.code = gen_code (temp) ;}
            ;

function_section: IDENTIF {sprintf(fun_name,"%s",$1.code); i = 0; empty_array(current_variables, 100);}'(' param ')' '{' axiom_func return_statement'}'  { printf("(defun %s (%s)%s %s)\n",$1.code, $4.code, $7.code, $8.code); } function_section { ; }
            |       { ; }
            ;
return_statement:   RETURN expression ';' {sprintf(temp,"%s", $2.code);
                                            $$.code = gen_code(temp);}
param:      param_seq       { sprintf(temp,"%s", $1.code); 
                            $$.code = gen_code (temp) ;}
            |               {strcpy(temp,"");
                                                $$.code = gen_code (temp) ;}
            ;
param_seq:  INTEGER IDENTIF rec_param           { sprintf(temp,"%s %s", $2.code, $3.code); 
                                                $$.code = gen_code (temp) ;}
            ;
rec_param:  ',' param_seq           { sprintf(temp,", %s", $2.code); 
                                                $$.code = gen_code (temp) ;}
            |                       {strcpy(temp,"");
                                                $$.code = gen_code (temp) ;}
            ;
Main_declaration:  {sprintf(fun_name,"main");  i = 0; empty_array(current_variables, 100);} '(' ')' '{' axiom_func '}'     { printf ("(defun main ()\n%s)\n", $5.code) ;}
            ;
axiom_func:   sentence                    { sprintf (temp, "(%s)", $1.code) ;
                                               $$.code = gen_code (temp) ;}
            | axiom_func sentence          { sprintf (temp,"%s\n %s", $1.code, $2.code) ; 
                                                $$.code = gen_code (temp) ;}
            ;



sentence:   INTEGER IDENTIF '=' expression   ';'      { 
                                                        sprintf(temp, "(setq %s_%s %s)", fun_name,$2.code, $4.code);
                                                        current_variables[i].identifier = $2.code;
                                                        i = i + 1; 
                                                        $$.code = gen_code (temp) ; }
            | IDENTIF '=' expression   ';'      {if(search_variable(current_variables,$1.code) == 0){
                                                sprintf (temp, "(setf %s %s)", $1.code, $3.code) ;
            } else{
                sprintf (temp, "(setf %s_%s %s)", fun_name,$1.code, $3.code) ;
            } 
                                               $$.code = gen_code (temp) ; }
            | PUTS '(' STRING ')'  ';'         {sprintf(temp,"(print \"%s\")", $3.code);
                                             $$.code = gen_code (temp) ;}
            | PRINTF '(' STRING ',' ELEM_SEQ ')' ';' {sprintf(temp,"%s",$5.code);
                                                 $$.code = gen_code (temp) ;}
            | WHILE '(' cond_expression ')' '{' axiom_func '}' {sprintf(temp,"(loop while %s do %s)", $3.code, $6.code);
                                                            $$.code = gen_code(temp);}
            | IF '(' cond_expression ')' '{' axiom_func '}'  RESTIF {sprintf(temp,"(if (%s)\n (progn %s)\n%s)",$3.code,$6.code,$8.code );
                                                                    $$.code = gen_code(temp);}
            | FOR '(' INTEGER IDENTIF '=' term  ';'  cond_expression ';' IDENTIF '=' IDENTIF operator term ')' '{' axiom_func '}' {if((strcmp($4.code,$10.code) == 0) && (strcmp($4.code,$12.code) == 0)){
                                    sprintf(temp, "(loop while %s do %s %s = %s %s %s)", $8.code, $17.code, $4.code, $4.code,$13.code, $14.code);
                                                                                        $$.code = gen_code(temp);
                                                                    }else{
                                                                        printf("\n%s %s %s are not equal, semantic error\n", $4.code, $10.code, $12.code);
                                                                        }
                                                                    } 
            ;
operator: '+' {sprintf(temp,"+");
                $$.code = gen_code(temp);}
        | '-' {sprintf(temp,"-");
                $$.code = gen_code(temp);}
        |  '*' {sprintf(temp,"*");
                $$.code = gen_code(temp);}
        | '/' {sprintf(temp,"/");
                $$.code = gen_code(temp);}
        ;
RESTIF: ELSE '{' axiom_func '}'                                     {sprintf(temp,"(progn %s)", $3.code);
                                                                    $$.code = gen_code(temp);}
        |                                                           {strcpy(temp,"");
                                                                    $$.code = gen_code(temp);}
        ;
ELEM_SEQ: expression RECURSIVITY_PRINTF     {sprintf(temp,"(prin1 %s) %s",$1.code,$2.code);
                                            $$.code = gen_code (temp) ;}
            | STRING RECURSIVITY_PRINTF     {sprintf(temp,"(prin1 %s) %s",$1.code,$2.code);
                                            $$.code = gen_code (temp) ;}
            ;
RECURSIVITY_PRINTF: ',' ELEM_SEQ            {sprintf(temp,", %s",$2.code);
                                            $$.code = gen_code (temp) ;}
            |                               {strcpy(temp,"");
                                            $$.code = gen_code (temp) ;}
            ;
                              
expression:   term                           { $$ = $1 ; }
            | expression '+' expression      { sprintf (temp, "(+ %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression '-' expression      { sprintf (temp, "(- %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression '*' expression      { sprintf (temp, "(* %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression '/' expression      { sprintf (temp, "(/ %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression AND expression       { sprintf (temp, "(and %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression OR expression          { sprintf (temp, "(or %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression '!' expression         { sprintf (temp, "(not %s %s )", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression EQ expression          { sprintf (temp, "(= %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression DIFF expression        { sprintf (temp, "(/= %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression '>' expression          { sprintf (temp, "(> %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression GTE expression         { sprintf (temp, "(>= %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression '<' expression          { sprintf (temp, "(< %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression LTE expression         { sprintf (temp, "(<= %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression '%' expression         { sprintf (temp, "(mod %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            ;

term:         operand                        { $$ = $1 ; }                          
            | '+' operand %prec UNARY_SIGN   { sprintf (temp, "(+ %s)", $2.code) ;
                                               $$.code = gen_code (temp) ; }
            | '-' operand %prec UNARY_SIGN   { sprintf (temp, "(- %s)", $2.code) ;
                                               $$.code = gen_code (temp) ; }    
            ;

operand:      IDENTIF                        { sprintf (temp, "%s", $1.code) ;
                                               $$.code = gen_code (temp) ; }
            | NUMBER                         { sprintf (temp, "%d", $1.value) ;
                                               $$.code = gen_code (temp) ; }
            | '(' expression ')'             { $$ = $2 ; }
            ;

cond_expression: expression AND expression       { sprintf (temp, "(and %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression OR expression          { sprintf (temp, "(or %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression '!' expression        { sprintf (temp, "(not %s %s )", $1.code,$3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression EQ expression          { sprintf (temp, "(= %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression DIFF expression        { sprintf (temp, "(/= %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression '>' expression          { sprintf (temp, "(> %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression GTE expression         { sprintf (temp, "(>= %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression '<' expression          { sprintf (temp, "(< %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression LTE expression         { sprintf (temp, "(<= %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            | expression '%' expression         { sprintf (temp, "(mod %s %s)", $1.code, $3.code) ;
                                               $$.code = gen_code (temp) ; }
            ;
                
%%                            // SECTION 4    Code in C

int n_line = 1 ;

void yyerror (char *message)
{
    fprintf (stderr, "%s in line %d\n", message, n_line) ;
    printf ( "\n") ;
}

char *int_to_string (int n)
{
    sprintf (temp, "%d", n) ;
    return gen_code (temp) ;
}

char *char_to_string (char c)
{
    sprintf (temp, "%c", c) ;
    return gen_code (temp) ;
}

char *my_malloc (int nbytes)     // reserve n bytes of dynamic memory 
{
    char *p ;
    static long int nb = 0 ;     // used to count the memory  
    static int nv = 0 ;          // required in total 

    p = malloc (nbytes) ;
    if (p == NULL) {
      fprintf (stderr, "No memory left for additional %d bytes\n", nbytes) ;
      fprintf (stderr, "%ld bytes reserved in %d calls \n", nb, nv) ;  
      exit (0) ;
    }
    nb += (long) nbytes ;
    nv++ ;

    return p ;
}


int search_variable(local_variables current_variables[], char *name) {
    if (current_variables == NULL) {
        return 0; // Array is NULL, so it's considered empty
    }

    for (int i = 0; i < 100; i++) {
        if (current_variables[i].identifier != NULL && strcmp(current_variables[i].identifier, name) == 0) {
            return 1; // Identifier found
        }
    }
    return 0; // Identifier not found or array is empty
}

void empty_array(local_variables current_variables[], int size) {
    // Iterate over each element of the array
    for (int i = 0; i < size; i++) {
        // Set the identifier to NULL (assuming it's a string)
        current_variables[i].identifier = NULL;
        // Set other members to default values if needed
        current_variables[i].val = 0; // For example, set integer members to 0
    }
}

/***************************************************************************/
/***************************** Keyword Section *****************************/
/***************************************************************************/

typedef struct s_keyword { // for the reserved words of C  
    char *name ;
    int token ;
} t_keyword ;

t_keyword keywords [] = {     // define the keywords 
    "main",        MAIN,      // and their associated token  
    "int",         INTEGER,
    "puts",         PUTS,
    "printf",       PRINTF,
    "&&",           AND,
    "||",           OR,
    "!=",           DIFF,
    "==",           EQ,
    "<=",           LTE,
    ">=",           GTE,
    "while",        WHILE,
    "if",           IF,
    "else",         ELSE,
    "for",          FOR,
    "return",       RETURN,
    NULL,          0          // 0 to mark the end of the table
} ;

t_keyword *search_keyword (char *symbol_name)
{                       // Search symbol names in the keyword table
                        // and return a pointer to token register
    int i ;
    t_keyword *sim ;

    i = 0 ;
    sim = keywords ;
    while (sim [i].name != NULL) {
	    if (strcmp (sim [i].name, symbol_name) == 0) {
                                   // strcmp(a, b) returns == 0 if a==b  
            return &(sim [i]) ;
        }
        i++ ;
    }

    return NULL ;
}

 
/***************************************************************************/
/******************** Section for the Lexical Analyzer  ********************/
/***************************************************************************/

char *gen_code (char *name)   // copy the argument to an  
{                             // string in dynamic memory  
    char *p ;
    int l ;
	
    l = strlen (name)+1 ;
    p = (char *) my_malloc (l) ;
    strcpy (p, name) ;
	
    return p ;
}


int yylex ()
{
    int i ;
    unsigned char c ;
    unsigned char cc ;
    char expandable_ops [] =  "!<=>|/%&+-*" ;
    char temp_str [256] ;
    t_keyword *symbol ;

    do { 
        c = getchar () ; 
        if (c == '#') { // Ignore the lines starting with # (#define, #include) 
            do { // WARNING that it may malfunction if a line contains # 
                c = getchar () ; 
            } while (c != '\n') ; 
        } 
        if (c == '/') { // character / can be the beginning of a comment. 
            cc = getchar () ; 
            if (cc != '/') { // If the following char is / is a comment, but.... 
                ungetc (cc, stdin) ; 
            } else { 
                c = getchar () ; // ... 
                if (c == '@') { // Lines starting with //@ are transcribed
                    do { // This is inline code (embedded code in C).
                        c = getchar () ; 
                        putchar (c) ; 
                    } while (c != '\n') ; 
                } else { // ==> comment, ignore the line 
                    while (c != '\n') { 
                        c = getchar () ; 
                    } 
                } 
            } 
        } 
        if (c == '\n') 
            n_line++ ; 
    } while (c == ' ' || c == '\n' || c == 10 || c == 13 || c == '\t') ;

    if (c == '\"') {
        i = 0 ;
        do {
            c = getchar () ;
            temp_str [i++] = c ;
        } while (c != '\"' && i < 255) ;
        if (i == 256) {
            printf ("WARNING: string with more than 255 characters in line %d\n", n_line) ; 
        } // we should read until the next “, but, what if it is  missing? 
        temp_str [--i] = '\0' ;
        yylval.code = gen_code (temp_str) ;
        return (STRING) ;
    }

    if (c == '.' || (c >= '0' && c <= '9')) {
        ungetc (c, stdin) ;
        scanf ("%d", &yylval.value) ;
//         printf ("\nDEV: NUMBER %d\n", yylval.value) ;       
        return NUMBER ;
    }

    if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {
        i = 0 ;
        while (((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') ||
            (c >= '0' && c <= '9') || c == '_') && i < 255) {
        temp_str [i++] = tolower (c) ; // ALL TO SMALL LETTERS
        c = getchar () ; 
    } 
    temp_str [i] = '\0' ; // End of string  
    ungetc (c, stdin) ; // return excess char  

    yylval.code = gen_code (temp_str) ; 
    symbol = search_keyword (yylval.code) ;
    if (symbol == NULL) { // is not reserved word -> iderntifrier  
//               printf ("\nDEV: IDENTIF %s\n", yylval.code) ;    // PARA DEPURAR
            return (IDENTIF) ;
        } else {
//               printf ("\nDEV: OTRO %s\n", yylval.code) ;       // PARA DEPURAR
            return (symbol->token) ;
        }
    }

    if (strchr (expandable_ops, c) != NULL) { // // look for c in expandable_ops
        cc = getchar () ;
        sprintf (temp_str, "%c%c", (char) c, (char) cc) ;
        symbol = search_keyword (temp_str) ;
        if (symbol == NULL) {
            ungetc (cc, stdin) ;
            yylval.code = NULL ;
            return (c) ;
        } else {
            yylval.code = gen_code (temp_str) ; // although it is not used   
            return (symbol->token) ;
        }
    }

//    printf ("\nDEV: LITERAL %d #%c#\n", (int) c, c) ;      // PARA DEPURAR
    if (c == EOF || c == 255 || c == 26) {
//         printf ("tEOF ") ;                                // PARA DEPURAR
        return (0) ;
    }

    return c ;
}


int main ()
{
    yyparse () ;
}
